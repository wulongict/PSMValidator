# Parameter file for psmvalidtor
#

# inputfile:depends on task
# validator: interact-*.ipro.pep.xml
# other tasks:  mgf file generated by SpectraST; 
inputfile = 

# task: psmfeature trainfragmodel 
#       fragscore cometsearch
task = 

# Liblinear (PeakPair) model related options: 
# ==================================================================
# use_output: export training and testing file for liblinear model
#
# min_foldchange: minimal intensity fold change to select peak pairs
#
# model: filename of pre-trained peakpair model
#
# peptidelen: build model for different peptide length
#
# ghostpeak: use fragment ion with zero intensity
#
# overwrite: re-do all steps and overwrite the files
#
# scoretype: score method for combining scores of individual peaks
# options: prob2 logprob prob weightedprob counts
#
# cometparam: the parameter file for comet.
# cometbinary: the path to comet binary file
use_output = false
min_foldchange = 2.0
model = 
peptidelen = false
ghostpeak = false
overwrite = false
scoretype = counts
cometparam = /data/wulong/data/proteometools/comet.params.new
cometbinary = /tools/bin/comet.2016012.linux.exe

# Comet Search related options:
# ==============================================================
# database: database for comet search. fasta format
# targetdb: target only database, fasta format
# decoydb: decoy only database, fasta format
# outname: output name of comet search result
database =
targetdb = 
decoydb =
outname = 

# specfile: input spectra file
specfile=

# decoytype: define decoy match by the two options:
# decoy or secondhit
decoytype = decoy

# truthfile: the groundtruth source file
truthfile = /data/wulong/pool.pep.txt

# truthmethod: groundtruth
# pepset: use a list of peptides; 
# scan+pep: use a list of scan peptide pairs.
truthmethod = pepset

# annotation: annotation method of input file (mgf), 
# option: searchresult title
#
# searchresult: the search file for annotation, when annotation method is searchresult
annotation = searchresult
searchresult =

# debug: only work on user specified psm
debug = false

# trainValidator: train new model (true); use existing model (false)
# Default: false
trainValidator = false

# validatorProb: train validator with probability estimation. 
# true for binary output; false for probabilistic output
validatorProb = false

# validatorModel: the name of the PSM score model to be used
# Default psmvalidatorRFmodel.foresst
validatorModel = psmvalidatorRFmodel.foresst

# writeValidatorModel: output trained model to the file
# Default psmvalidatorRFmodel.forest
writeValidatorModel = psmvalidatorRFmodel.forest

# ranger: parameter for random forest model
# ==============================================================
# mtry: number of features for split. Default: 3
# ntree: number of trees/estimators in the forest. Default: 200
# thread: number of thread. 0 means thread=#(CPU)-1
mtry = 3
ntree = 200
thread = 0

